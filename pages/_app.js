import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import "../styles/globals.css";
import Head from "next/head";
import { connect, web3Modal } from "/utils/web3Auth";
import { GlobalStateProvider } from "/utils/store";
import { getCookie, setCookie } from "/utils/cookie";
import Header from "./components/Header";

const App = ({ Component, pageProps, persistedState }) => {
   const router = useRouter();
   const activeUser =
      !!persistedState.user?.address && !!persistedState.user?.chainId;

   // Auto connect to the cached provider or prompt user to login with wallet
   // we intiate the connection listeners from within the Header component so we
   // that we can dispatch actions to gloal state the modal connections
   // must be initiated from the top-most level, so this stays here for now
   useEffect(async () => {
      if (web3Modal?.cachedProvider || !activeUser) {
         const authData = await connect();
         setCookie(
            "persistedState",
            JSON.stringify({ ...persistedState, user: authData })
         );
         !activeUser && router.reload();
      }
   }, [connect]);

   return (
      <GlobalStateProvider persistedState={{ ...persistedState }}>
         <Head>
            <title>Hot Swap</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <Header />
         <Component {...pageProps} />
      </GlobalStateProvider>
   );
};

App.getInitialProps = async ({ ctx }) => {
   // Persists global state on page refresh
   // Check if there a state cookie saved, if cookie is available then use the cookie's value as our initial state
   const cookies = ctx?.req ? ctx.req.headers.cookie : document.cookie;
   const persistedState = (await getCookie("persistedState", cookies)) || "{}";
   console.log("persistedState", persistedState);
   return {
      persistedState: JSON.parse(persistedState),
   };
};

export default App;
